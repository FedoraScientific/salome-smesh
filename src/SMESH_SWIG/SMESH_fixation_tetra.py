#
# Tetrahedrization of the geometry generated by the Python script
# SMESH_fixation.py
# Hypothesis and algorithms for the mesh generation are global
#

import SMESH_fixation
import SMESH
import smeshpy

compshell = SMESH_fixation.compshell
idcomp = SMESH_fixation.idcomp
geompy = SMESH_fixation.geompy
salome = SMESH_fixation.salome
sg = SMESH_fixation.sg

ShapeTypeShell     = 3
ShapeTypeFace      = 4
ShapeTypeEdge      = 6

print "Analysis of the geometry to be meshed :"
subShellList=geompy.SubShapeAll(compshell,ShapeTypeShell)
subFaceList=geompy.SubShapeAll(compshell,ShapeTypeFace)
subEdgeList=geompy.SubShapeAll(compshell,ShapeTypeEdge)

print "number of Shells in compshell : ",len(subShellList)
print "number of Faces in compshell : ",len(subFaceList)
print "number of Edges in compshell : ",len(subEdgeList)

status=geompy.CheckShape(compshell)
print " check status ", status

### ---- launch SMESH

smeshgui = salome.ImportComponentGUI("SMESH")
smeshgui.Init(salome.myStudyId)

gen=smeshpy.smeshpy()

### ---- create Hypothesis

print "-------------------------- create Hypothesis"

print "-------------------------- NumberOfSegments"

numberOfSegments = 5

hypothesis=gen.CreateHypothesis("NumberOfSegments")
hypNbSeg=hypothesis._narrow(SMESH.SMESH_NumberOfSegments)
hypNbSeg.SetNumberOfSegments(numberOfSegments)
hypNbSegID = hypNbSeg.GetId()
print hypNbSeg.GetName()
print hypNbSegID
print hypNbSeg.GetNumberOfSegments()

idseg = smeshgui.AddNewHypothesis( salome.orb.object_to_string(hypNbSeg) )
smeshgui.SetName(idseg, "NumberOfSegments")

print "-------------------------- MaxElementArea"

maxElementArea = 80

hypothesis=gen.CreateHypothesis("MaxElementArea")
hypArea=hypothesis._narrow(SMESH.SMESH_MaxElementArea)
hypArea.SetMaxElementArea(maxElementArea)
print hypArea.GetName()
print hypArea.GetId()
print hypArea.GetMaxElementArea()

idarea = smeshgui.AddNewHypothesis( salome.orb.object_to_string(hypArea) )
smeshgui.SetName(idarea, "MaxElementArea")

print "-------------------------- MaxElementVolume"

maxElementVolume = 150

hypothesis=gen.CreateHypothesis("MaxElementVolume")
hypVolume=hypothesis._narrow(SMESH.SMESH_MaxElementVolume)
hypVolume.SetMaxElementVolume(maxElementVolume)
print hypVolume.GetName()
print hypVolume.GetId()
print hypVolume.GetMaxElementVolume()

idvolume = smeshgui.AddNewHypothesis( salome.orb.object_to_string(hypVolume) )
smeshgui.SetName(idvolume, "MaxElementVolume")

# ---- create Algorithms

print "-------------------------- create Algorithms"

print "-------------------------- Regular_1D"

hypothesis=gen.CreateHypothesis("Regular_1D")
regular1D = hypothesis._narrow(SMESH.SMESH_Regular_1D)
regularID = smeshgui.AddNewAlgorithms( salome.orb.object_to_string(regular1D) )
smeshgui.SetName(regularID, "Wire Discretisation")

print "-------------------------- MEFISTO_2D"

hypothesis=gen.CreateHypothesis("MEFISTO_2D")
mefisto2D = hypothesis._narrow(SMESH.SMESH_MEFISTO_2D)
mefistoID = smeshgui.AddNewAlgorithms( salome.orb.object_to_string(mefisto2D) )
smeshgui.SetName(mefistoID, "MEFISTO_2D")

print "-------------------------- NETGEN_3D"

hypothesis=gen.CreateHypothesis("NETGEN_3D")
netgen3D = hypothesis._narrow(SMESH.SMESH_NETGEN_3D)
netgenID = smeshgui.AddNewAlgorithms( salome.orb.object_to_string(netgen3D) )
smeshgui.SetName(netgenID, "NETGEN_3D")

# ---- init a Mesh with the compshell

mesh=gen.Init(idcomp)
idmesh = smeshgui.AddNewMesh( salome.orb.object_to_string(mesh) )
smeshgui.SetName(idmesh, "MeshcompShell")
smeshgui.SetShape(idcomp, idmesh)

# ---- add hypothesis to compshell

print "-------------------------- add hypothesis to compshell"

ret=mesh.AddHypothesis(compshell,regular1D)
print ret
ret=mesh.AddHypothesis(compshell,hypNbSeg)
print ret
ret=mesh.AddHypothesis(compshell,mefisto2D)
print ret
ret=mesh.AddHypothesis(compshell,hypArea)
print ret
ret=mesh.AddHypothesis(compshell,netgen3D)
print ret
ret=mesh.AddHypothesis(compshell,hypVolume)
print ret

smeshgui.SetAlgorithms( idmesh, regularID)
smeshgui.SetHypothesis( idmesh, idseg )
smeshgui.SetAlgorithms( idmesh, mefistoID )
smeshgui.SetHypothesis( idmesh, idarea )
smeshgui.SetAlgorithms( idmesh, netgenID )
smeshgui.SetHypothesis( idmesh, idvolume )

sg.updateObjBrowser(1)

print "-------------------------- compute compshell"
ret=gen.Compute(mesh,idcomp)
print ret
if ret != 0:
    log=mesh.GetLog(0) # no erase trace
    for linelog in log:
        print linelog
else:
    print "problem when computing the mesh"

sg.updateObjBrowser(1)
