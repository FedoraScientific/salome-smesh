#
# Tetrahedrization of the geometry generated by the Python script GEOM_Partition1.py
# Hypothesis and algorithms for the mesh generation are global
#
#%Make geometry (like CEA script (A1)) using Partition algorithm% from OCC
# -- Rayon de la bariere

barier_height = 7.0
barier_radius = 5.6 / 2 # Rayon de la bariere
colis_radius = 1.0 / 2  # Rayon du colis
colis_step = 2.0        # Distance s‰parant deux colis
cc_width = 0.11         # Epaisseur du complement de colisage

# --

cc_radius = colis_radius + cc_width
from math import sqrt
colis_center = sqrt(2.0)*colis_step/2

# --

import geompy
geom = geompy.geom

boolean_common  = 1
boolean_cut     = 2
boolean_fuse    = 3
boolean_section = 4

# --

barier = geompy.MakeCylinder(
    geom.MakePointStruct(0.,0.,0.),
    geom.MakeDirection(geom.MakePointStruct(0.,0.,1.)),
    barier_radius,
    barier_height)

# --

colis = geompy.MakeCylinder(
    geom.MakePointStruct(0.,0.,0.),
    geom.MakeDirection(geom.MakePointStruct(0.,0.,1.)),
    colis_radius,
    barier_height)

cc = geompy.MakeCylinder(
    geom.MakePointStruct(0.,0.,0.),
    geom.MakeDirection(geom.MakePointStruct(0.,0.,1.)),
    cc_radius,
    barier_height)

colis_cc = geompy.MakeCompound(
    [colis._get_Name(), cc._get_Name()])

colis_cc = geompy.MakeTranslation(
    colis_cc, colis_center, 0.0, 0.0)

colis_cc_multi = geompy.MakeMultiRotation1D(
    colis_cc,
    geom.MakeDirection(geom.MakePointStruct(0.,0.,1.)),
    geom.MakePointStruct(0.,0.,0.),
    4)

# --

alveole = geompy.Partition(
    [colis_cc_multi._get_Name(), barier._get_Name()])

ShapeTypeShell     = 3
ShapeTypeFace      = 4
ShapeTypeEdge      = 6

print "Analysis of the geometry to mesh (right after the Partition) :"

subShellList=geompy.SubShapeAll(alveole,ShapeTypeShell)
subFaceList=geompy.SubShapeAll(alveole,ShapeTypeFace)
subEdgeList=geompy.SubShapeAll(alveole,ShapeTypeEdge)

print "number of Shells in alveole : ",len(subShellList)
print "number of Faces in alveole : ",len(subFaceList)
print "number of Edges in alveole : ",len(subEdgeList)

subshapes = geompy.SubShapeAll( alveole, geompy.ShapeType["SHAPE"] )

## there are 9 subshapes

comp1 = geompy.MakeCompound( [ subshapes[0]._get_Name(), subshapes[1]._get_Name() ] );
comp2 = geompy.MakeCompound( [ subshapes[2]._get_Name(), subshapes[3]._get_Name() ] );
comp3 = geompy.MakeCompound( [ subshapes[4]._get_Name(), subshapes[5]._get_Name() ] );
comp4 = geompy.MakeCompound( [ subshapes[6]._get_Name(), subshapes[7]._get_Name() ] );

compIORs = []
compIORs.append( comp1._get_Name() );
compIORs.append( comp2._get_Name() );
compIORs.append( comp3._get_Name() );
compIORs.append( comp4._get_Name() );
comp = geompy.MakeCompound( compIORs );

alveole = geompy.MakeCompound( [ comp._get_Name(), subshapes[8]._get_Name() ]);
	
idalveole= geompy.addToStudy(alveole, "alveole")

print "Analysis of the geometry to mesh (right after the MakeCompound) :"

subShellList=geompy.SubShapeAll(alveole,ShapeTypeShell)
subFaceList=geompy.SubShapeAll(alveole,ShapeTypeFace)
subEdgeList=geompy.SubShapeAll(alveole,ShapeTypeEdge)

print "number of Shells in alveole : ",len(subShellList)
print "number of Faces in alveole : ",len(subFaceList)
print "number of Edges in alveole : ",len(subEdgeList)

status=geompy.CheckShape(alveole)
print " check status ", status

# ---- launch SMESH

import salome
from salome import sg

import SMESH
import smeshpy

smeshgui = salome.ImportComponentGUI("SMESH")
smeshgui.Init(salome.myStudyId)

gen=smeshpy.smeshpy()

# ---- create Hypothesis

print "-------------------------- create Hypothesis (In this case global hypothesis are used)"

print "-------------------------- NumberOfSegments"

numberOfSegments = 10

hyp1=gen.CreateHypothesis("NumberOfSegments")
hypNbSeg=hyp1._narrow(SMESH.SMESH_NumberOfSegments)
hypNbSeg.SetNumberOfSegments(numberOfSegments)
hypNbSegID = hypNbSeg.GetId()
print hypNbSeg.GetName()
print hypNbSegID
print hypNbSeg.GetNumberOfSegments()

idseg = smeshgui.AddNewHypothesis( salome.orb.object_to_string(hypNbSeg) )
smeshgui.SetName(idseg, "NumberOfSegments")

print "-------------------------- MaxElementArea"

maxElementArea = 0.1

hyp2=gen.CreateHypothesis("MaxElementArea")
hypArea=hyp2._narrow(SMESH.SMESH_MaxElementArea)
hypArea.SetMaxElementArea(maxElementArea)
print hypArea.GetName()
print hypArea.GetId()
print hypArea.GetMaxElementArea()

idarea = smeshgui.AddNewHypothesis( salome.orb.object_to_string(hypArea) )
smeshgui.SetName(idarea, "MaxElementArea")

print "-------------------------- MaxElementVolume"

maxElementVolume = 0.5

hyp3=gen.CreateHypothesis("MaxElementVolume")
hypVolume=hyp3._narrow(SMESH.SMESH_MaxElementVolume)
hypVolume.SetMaxElementVolume(maxElementVolume)
print hypVolume.GetName()
print hypVolume.GetId()
print hypVolume.GetMaxElementVolume()

idvolume = smeshgui.AddNewHypothesis( salome.orb.object_to_string(hypVolume) )
smeshgui.SetName(idvolume, "MaxElementVolume")

# ---- create Algorithms

print "-------------------------- create Algorithms"

print "-------------------------- Regular_1D"

hypothesis=gen.CreateHypothesis("Regular_1D")
regular1D = hypothesis._narrow(SMESH.SMESH_Regular_1D)
regularID = smeshgui.AddNewAlgorithms( salome.orb.object_to_string(regular1D) )
smeshgui.SetName(regularID, "Wire Discretisation")

print "-------------------------- MEFISTO_2D"

hypothesis=gen.CreateHypothesis("MEFISTO_2D")
mefisto2D = hypothesis._narrow(SMESH.SMESH_MEFISTO_2D)
mefistoID = smeshgui.AddNewAlgorithms( salome.orb.object_to_string(mefisto2D) )
smeshgui.SetName(mefistoID, "MEFISTO_2D")

print "-------------------------- NETGEN_3D"

hypothesis=gen.CreateHypothesis("NETGEN_3D")
netgen3D = hypothesis._narrow(SMESH.SMESH_NETGEN_3D)
netgenID = smeshgui.AddNewAlgorithms( salome.orb.object_to_string(netgen3D) )
smeshgui.SetName(netgenID, "NETGEN_3D")

# ---- init a Mesh with the alveole

mesh=gen.Init(idalveole)
idmesh = smeshgui.AddNewMesh( salome.orb.object_to_string(mesh) )
smeshgui.SetName(idmesh, "MeshAlveole")
smeshgui.SetShape(idalveole, idmesh)

# ---- add hypothesis to alveole

print "-------------------------- add hypothesis to alveole"

ret=mesh.AddHypothesis(alveole,regular1D)
print ret
ret=mesh.AddHypothesis(alveole,hypNbSeg)
print ret
ret=mesh.AddHypothesis(alveole,mefisto2D)
print ret
ret=mesh.AddHypothesis(alveole,hypArea)
print ret
ret=mesh.AddHypothesis(alveole,netgen3D)
print ret
ret=mesh.AddHypothesis(alveole,hypVolume)
print ret

smeshgui.SetAlgorithms( idmesh, regularID)
smeshgui.SetHypothesis( idmesh, idseg )
smeshgui.SetAlgorithms( idmesh, mefistoID )
smeshgui.SetHypothesis( idmesh, idarea )
smeshgui.SetAlgorithms( idmesh, netgenID )
smeshgui.SetHypothesis( idmesh, idvolume )

sg.updateObjBrowser(1)


print "-------------------------- compute the mesh of alveole "
ret=gen.Compute(mesh,idalveole)
print ret
if ret != 0:
    log=mesh.GetLog(0) # no erase trace
    for linelog in log:
        print linelog
else:
    print "problem when computing the mesh"

sg.updateObjBrowser(1)
