//  SMESH SMDS : implementaion of Salome mesh data structure
//
//  Copyright (C) 2003  OPEN CASCADE, EADS/CCR, LIP6, CEA/DEN,
//  CEDRAT, EDF R&D, LEG, PRINCIPIA R&D, BUREAU VERITAS 
// 
//  This library is free software; you can redistribute it and/or 
//  modify it under the terms of the GNU Lesser General Public 
//  License as published by the Free Software Foundation; either 
//  version 2.1 of the License. 
// 
//  This library is distributed in the hope that it will be useful, 
//  but WITHOUT ANY WARRANTY; without even the implied warranty of 
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
//  Lesser General Public License for more details. 
// 
//  You should have received a copy of the GNU Lesser General Public 
//  License along with this library; if not, write to the Free Software 
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA 
// 
//  See http://www.opencascade.org/SALOME/ or email : webmaster.salome@opencascade.org 
//
//
//
//  File   : SMDS_MeshNode.lxx
//  Author : Jean-Michel BOULCOURT
//  Module : SMESH

inline Standard_Integer SMDS_MeshNode::GetKey() const
{
  return myID;
}

//=======================================================================
//function : X
//purpose  : 
//           
//=======================================================================

inline Standard_Real SMDS_MeshNode::X() const
{
  return myPnt.X();
}

//=======================================================================
//function : Y
//purpose  : 
//           
//=======================================================================

inline Standard_Real SMDS_MeshNode::Y() const
{
  return myPnt.Y();
}

//=======================================================================
//function : Z
//purpose  : 
//           
//=======================================================================

inline Standard_Real SMDS_MeshNode::Z() const
{
  return myPnt.Z();
}

//=======================================================================
//function : Pnt
//purpose  : 
//           
//=======================================================================

inline gp_Pnt SMDS_MeshNode::Pnt() const
{
  return myPnt;
}

//=======================================================================
//function : Pnt
//purpose  : 
//           
//=======================================================================

inline void SMDS_MeshNode::SetPnt(const gp_Pnt& P)
{
  myPnt = P;
}

//=======================================================================
//function : AddInverseElement
//purpose  : 
//=======================================================================

inline void SMDS_MeshNode::AddInverseElement(const Handle(SMDS_MeshElement)& ME)
{
  myInverseElements.Append(ME);
}

//=======================================================================
//function : InverseElements
//purpose  : 
//=======================================================================

inline const SMDS_ListOfMeshElement& SMDS_MeshNode::InverseElements() const
{
  return myInverseElements;
}

//=======================================================================
//function : ClearInverseElements
//purpose  : 
//=======================================================================

inline void SMDS_MeshNode::ClearInverseElements()
{
  myInverseElements.Clear();
}

