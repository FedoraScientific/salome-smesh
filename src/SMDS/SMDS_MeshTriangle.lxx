//  SMESH SMDS : implementaion of Salome mesh data structure
//
//  Copyright (C) 2003  OPEN CASCADE, EADS/CCR, LIP6, CEA/DEN,
//  CEDRAT, EDF R&D, LEG, PRINCIPIA R&D, BUREAU VERITAS 
// 
//  This library is free software; you can redistribute it and/or 
//  modify it under the terms of the GNU Lesser General Public 
//  License as published by the Free Software Foundation; either 
//  version 2.1 of the License. 
// 
//  This library is distributed in the hope that it will be useful, 
//  but WITHOUT ANY WARRANTY; without even the implied warranty of 
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
//  Lesser General Public License for more details. 
// 
//  You should have received a copy of the GNU Lesser General Public 
//  License along with this library; if not, write to the Free Software 
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA 
// 
//  See http://www.opencascade.org/SALOME/ or email : webmaster.salome@opencascade.org 
//
//
//
//  File   : SMDS_MeshTriangle.lxx
//  Author : Jean-Michel BOULCOURT
//  Module : SMESH

inline Standard_Address SMDS_MeshTriangle::GetConnections() const
{
  return (Standard_Address)&myNodes;
}

//=======================================================================
//function : GetConnection
//purpose  : 
//           
//=======================================================================

inline Standard_Integer SMDS_MeshTriangle::GetConnection(const Standard_Integer rank) const
{
  return myNodes[rank-1];
}

//=======================================================================
//function : ComputeKey
//purpose  : compute the Key of the face based on the ids of its bounding nodes
//           
//=======================================================================

inline void SMDS_MeshTriangle::ComputeKey()
{
  //  myKey = (myNodes[0] << 2) + (myNodes[1] << 1) + (myNodes[2]);
  myKey = myNodes[0] + myNodes[1] + myNodes[2];
}


//=======================================================================
//function : GetEdgeDefinedByNodes
//purpose  : 
//=======================================================================
inline void SMDS_MeshTriangle::GetEdgeDefinedByNodes(const Standard_Integer rank, 
						     Standard_Integer& idnode1,
						     Standard_Integer& idnode2) const
{
  idnode1 = myNodes[rank-1];
  idnode2 = myNodes[rank % myNbNodes];
}


