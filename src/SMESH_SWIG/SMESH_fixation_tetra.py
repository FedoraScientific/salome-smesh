#
# Tetrahedrization of the geometry generated by the Python script
# SMESH_fixation.py
# Hypothesis and algorithms for the mesh generation are global
#

import StdMeshers
import NETGENPlugin
import SMESH_fixation

compshell = SMESH_fixation.compshell
idcomp = SMESH_fixation.idcomp
geompy = SMESH_fixation.geompy
salome = SMESH_fixation.salome

print "Analysis of the geometry to be meshed :"
subShellList = geompy.SubShapeAll(compshell, geompy.ShapeType["SHELL"])
subFaceList  = geompy.SubShapeAll(compshell, geompy.ShapeType["FACE"])
subEdgeList  = geompy.SubShapeAll(compshell, geompy.ShapeType["EDGE"])

print "number of Shells in compshell : ", len(subShellList)
print "number of Faces  in compshell : ", len(subFaceList)
print "number of Edges  in compshell : ", len(subEdgeList)

status = geompy.CheckShape(compshell)
print " check status ", status

### ---------------------------- SMESH --------------------------------------
smesh = salome.lcc.FindOrLoadComponent("FactoryServer", "SMESH")

smeshgui = salome.ImportComponentGUI("SMESH")
smeshgui.Init(salome.myStudyId)

print "-------------------------- create Hypothesis"

print "-------------------------- NumberOfSegments"

numberOfSegments = 5

hypNbSeg = smesh.CreateHypothesis("NumberOfSegments", "libStdMeshersEngine.so")
hypNbSeg.SetNumberOfSegments(numberOfSegments)

print hypNbSeg.GetName()
print hypNbSeg.GetId()
print hypNbSeg.GetNumberOfSegments()

smeshgui.SetName(salome.ObjectToID(hypNbSeg), "NumberOfSegments_5")

print "-------------------------- MaxElementArea"

## maxElementArea = 80

## hypArea=smesh.CreateHypothesis("MaxElementArea")
## hypArea.SetMaxElementArea(maxElementArea)
## print hypArea.GetName()
## print hypArea.GetId()
## print hypArea.GetMaxElementArea()
## smeshgui.SetName(salome.ObjectToID(hypArea), "MaxElementArea_160")

hypLengthFromEdges = smesh.CreateHypothesis("LengthFromEdges", "libStdMeshersEngine.so")
smeshgui.SetName(salome.ObjectToID(hypLengthFromEdges), "LengthFromEdges")


print "-------------------------- MaxElementVolume"

maxElementVolume = 1000

hypVolume = smesh.CreateHypothesis("MaxElementVolume", "libStdMeshersEngine.so")
hypVolume.SetMaxElementVolume(maxElementVolume)

print hypVolume.GetName()
print hypVolume.GetId()
print hypVolume.GetMaxElementVolume()

smeshgui.SetName(salome.ObjectToID(hypVolume), "MaxElementVolume_1000")

print "-------------------------- create Algorithms"

print "-------------------------- Regular_1D"

regular1D = smesh.CreateHypothesis("Regular_1D", "libStdMeshersEngine.so")

smeshgui.SetName(salome.ObjectToID(regular1D), "Wire Discretisation")

print "-------------------------- MEFISTO_2D"

mefisto2D = smesh.CreateHypothesis("MEFISTO_2D", "libStdMeshersEngine.so")

smeshgui.SetName(salome.ObjectToID(mefisto2D), "MEFISTO_2D")

print "-------------------------- NETGEN_3D"

netgen3D = smesh.CreateHypothesis("NETGEN_3D", "libNETGENEngine.so")

smeshgui.SetName(salome.ObjectToID(netgen3D), "NETGEN_3D")

# ---- init a Mesh with the compshell

mesh = smesh.CreateMesh(compshell)
smeshgui.SetName(salome.ObjectToID(mesh), "MeshcompShel")

print "-------------------------- add hypothesis to compshell"

mesh.AddHypothesis(compshell,regular1D)
mesh.AddHypothesis(compshell,hypNbSeg)

mesh.AddHypothesis(compshell,mefisto2D)
mesh.AddHypothesis(compshell,hypLengthFromEdges)

mesh.AddHypothesis(compshell,netgen3D)
mesh.AddHypothesis(compshell,hypVolume)

salome.sg.updateObjBrowser(1)

print "-------------------------- compute compshell"
ret = smesh.Compute(mesh,compshell)
print ret
if ret != 0:
    log = mesh.GetLog(0) # no erase trace
    for linelog in log:
        print linelog
    print "Information about the MeshcompShel:"
    print "Number of nodes        : ", mesh.NbNodes()
    print "Number of edges        : ", mesh.NbEdges()
    print "Number of faces        : ", mesh.NbFaces()
    print "Number of triangles    : ", mesh.NbTriangles()
    print "Number of volumes      : ", mesh.NbVolumes()
    print "Number of tetrahedrons : ", mesh.NbTetras()
    
else:
    print "problem when computing the mesh"
